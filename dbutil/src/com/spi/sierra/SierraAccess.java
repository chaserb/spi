/*
 * Copyright 2011 Chase Barrett. All rights reserved.
 * PROPRIETARY/CONFIDENTIAL. 
 */
package com.spi.sierra;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.TreeMap;

import javax.swing.text.MutableAttributeSet;
import javax.swing.text.html.HTML.Attribute;
import javax.swing.text.html.HTML.Tag;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.parser.ParserDelegator;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.spi.AbstractInputProvider;
import com.spi.Order;
import com.spi.util.Debug;

/**
 * @author Chase Barrett
 */
public class SierraAccess extends AbstractInputProvider
{
   private static final String DEBUG_PREFIX = "SierraAccess.";
   private static List<OutputField> cFields;
   private static final long THREE_MONTHS = 3l * 30l * 24l * 60l * 60l * 1000l;
   private static final long TWO_YEARS = 8 * THREE_MONTHS; 
   private static final SimpleDateFormat SHORT_FORMAT = new SimpleDateFormat("MM/dd/yyyy");
   
   private Web mWeb;

   public String getServiceCompany()
   {
      return "Sierra Field Services";
   }

   public List<Order> getAllOrders()
   {
      if (Debug.checkLevel(Debug.MED)) Debug.debug(Debug.MED, DEBUG_PREFIX + "getAllOrders(): START");

      // Set up the list of orders
      List<SierraOrder> orders = new ArrayList<SierraOrder>();
      try
      {
         // Set up our search by posting search criteria
         Map<String, String> params = getSearchParams();
         params.put("TextBoxCreatedStart", SHORT_FORMAT.format(new Date(System.currentTimeMillis() - THREE_MONTHS)));
         InputStream dontCare = getWeb().getInput("http://ezinspections.com/inspManager/searchJobs.aspx", params);
         dontCare.close();
         
         // Go get the pages searched for
         processPage(getWeb().getInput(getWeb().getInputURL()), orders);
      }
      catch (IOException e)
      {
         getStatistics().setErrorOccurred();
         Debug.debugException("Ooops!", e);
      }
      
      if (Debug.checkLevel(Debug.MED)) Debug.debug(Debug.MED, DEBUG_PREFIX + "getAllOrders(): Total number of orders available: " + orders.size());

      for (SierraOrder order : orders)
      {
         try
         {
            processOrder(order);
         }
         catch (Exception e)
         {
            Debug.debugException("Unable to retrieve details for order: " + order.getTrackingNo(), e);
         }
      }

      getStatistics().setNumIOsTotal(orders.size());
      if (Debug.checkLevel(Debug.MED)) Debug.debug(Debug.MED, DEBUG_PREFIX + "getAllOrders(): END: " + orders.size());
      return new ArrayList<Order>(orders);
   }

   public List<OutputField> getSupportedFields()
   {
      if (cFields == null)
      {
         cFields = new ArrayList<OutputField>(20);
         cFields.add(OutputField.PROP_NO);
         cFields.add(OutputField.PROPERTY_ADDRESS);
         cFields.add(OutputField.CITY);
         cFields.add(OutputField.ST);
         cFields.add(OutputField.ZIP_CODE);
         cFields.add(OutputField.MORTGAGER);
         cFields.add(OutputField.LOAN_NO);
         cFields.add(OutputField.MTG_COMP);
         cFields.add(OutputField.REP);
         cFields.add(OutputField.WAGES);
         cFields.add(OutputField.COST);
         cFields.add(OutputField.REPORT_TYPE);
         cFields.add(OutputField.RECD_IN);
         cFields.add(OutputField.REP_COMP_DATE);
         cFields.add(OutputField.DUE_SERV);
         cFields.add(OutputField.IS_RURAL);
         cFields.add(OutputField.PHOTOS_Y_N);
         cFields.add(OutputField.FOR_SALE);
         cFields.add(OutputField.FOR_SALE_PHONE);
         cFields.add(OutputField.OCCUPANCY);
         cFields.add(OutputField.PERSONAL_CONTACT);
         cFields.add(OutputField.PROPERTY_DESCRIPTION);
         cFields.add(OutputField.VALUE);
         cFields.add(OutputField.COMMENTS);
      }
      return cFields;
   }
   
   protected Web getWeb()
   {
      if (mWeb == null)
      {
         mWeb = new Web(getEnvironment(), getName());
      }
      return mWeb;
   }
   
   protected void processPage(InputStream is, List<SierraOrder> orders)
   {
      try
      {
         // Set up the input stream
         BufferedInputStream buf = new BufferedInputStream(is);

         // Set up the document
         Document doc = getWeb().parseInput(buf);

         // Find orders in the content table on the current page
         NodeList tables = doc.getElementsByTagName("table");
         for (int i = 0; i < tables.getLength(); i++)
         {
            Node table = tables.item(i);
            Node idAttr = table.getAttributes().getNamedItem("id");
            if (idAttr != null && "_ctl0_Main_JobGridView".equals(idAttr.getNodeValue()))
            {
               orders.addAll(processTable(table));
            }
         }
         
         // See if there is a continuation page
         NodeList anchors = doc.getElementsByTagName("a");
         boolean hasNextPage = false;
         for (int i = 0; i < anchors.getLength(); i++)
         {
            Node anchor = anchors.item(i);
            Node idAttr = anchor.getAttributes().getNamedItem("id");
            if (idAttr != null && "_ctl0_Main_PageNavigatorTop_ButtonPageNext".equals(idAttr.getNodeValue()))
            {
               hasNextPage = true;
            }
         }
         
         if (hasNextPage)
         {
            // Find all the hidden form variables and go to continuation page
            NodeList inputs = doc.getElementsByTagName("input");
            Map<String, String> params = new TreeMap<String, String>();
            for (int i = 0; i < inputs.getLength(); i++)
            {
               Node input = inputs.item(i);
               NamedNodeMap attrs = input.getAttributes(); 
               Node typeAttr = (attrs == null) ? null : attrs.getNamedItem("type");
               if (typeAttr != null && "hidden".equals(typeAttr.getNodeValue()))
               {
                  Node nameAttr = attrs.getNamedItem("name");
                  Node valueAttr = attrs.getNamedItem("value");
                  if (nameAttr != null) 
                  {
                     params.put(nameAttr.getNodeValue(), valueAttr == null ? "" : valueAttr.getNodeValue());
                  }
               }
            }
            
            // Goto the next page 
            params.put("__EVENTTARGET", "_ctl0:Main:PageNavigatorTop:ButtonPageNext");
            params.put("__EVENTARGUMENT", "");
            params.put("__LASTFOCUS", "");
            processPage(getWeb().getInput(getWeb().getInputURL(), params), orders);
         }
      }
      catch (Exception e)
      {
         getStatistics().setErrorOccurred();
         Debug.debugException("Ooops!", e);
      }
   }

   protected List<SierraOrder> processTable(Node table)
   {
      List<SierraOrder> orders = new ArrayList<SierraOrder>();

      NodeList rows = table.getChildNodes();

      for (int i = 1 /* skip the header row */; i < rows.getLength(); i++)
      {
         Node row = rows.item(i);
         NodeList cells = row.getChildNodes();

         String sysIdStr = cells.item(0).getChildNodes().item(2).getAttributes().getNamedItem("value").getNodeValue();
         String orderNumStr = cells.item(4).getFirstChild().getFirstChild().getNodeValue();

         SierraOrder order = new SierraOrder(this, orderNumStr);
         order.setSysId(sysIdStr);
         orders.add(order);
      }

      if (Debug.checkLevel(Debug.HIGH)) Debug.debug(Debug.HIGH, DEBUG_PREFIX + "processTable(): " + rows.getLength() + " rows in the table.");

      return orders;
   }
   
   protected void processOrder(SierraOrder order) throws IOException
   {
      InputStream input = getWeb().getInput(order.getDetailsLink());
      Reader reader = new InputStreamReader(input);
      ValueScraper scraper = new ValueScraper();
      new ParserDelegator().parse(reader, scraper, false);
      Map<String, String> values = scraper.getValueMap();
      
      // Complete Date
      try
      {
         Date completeDate = getDate(values.get("t"));
         if (completeDate != null) order.setCompleteDate(completeDate);
      }
      catch (Exception e)
      {
         Debug.debugException("Unable to read the complete date for order at: " + order.getDetailsLink(), e);
      }
      
      // Rep Due Date
      try
      {
         Date dueDate = getDate(values.get("dueDate"));
         if (dueDate != null) order.setRepDueDate(dueDate);
      }
      catch (Exception e)
      {
         Debug.debugException("Unable to read the due date for order at: " + order.getDetailsLink(), e);
      }
      
      // Start Date
      try
      {
         Date startDate = getDate(values.get("WSD"));
         if (startDate != null) order.setStartDate(startDate);
      }
      catch (Exception e)
      {
         Debug.debugException("Unable to read the start date for order at: " + order.getDetailsLink(), e);
      }

      // Miscellaneous
      order.setMortgagor(values.containsKey("NAME") ? values.get("NAME") : values.get("MA"));
      order.setAddress(values.get("ADDR"));
      order.setCity(values.get("CITY"));
      order.setState(values.get("STATE"));
      order.setZip(values.get("ZIP"));
      order.setClient(values.get("CLIENT"));
      order.setAccountNumber(values.get("LONUM"));
      order.setPropertyId(values.get("PID"));
      order.setServiceType(values.get("servicecode"));
      order.setOccupancy(values.containsKey("CHOISE") ? values.get("CHOISE") : values.get("OPYSTATUS"));
      order.setOccupancyVerifiedBy(values.containsKey("DETER") ? values.get("DETER") : values.get("OPYVER"));
      order.setForSale(values.get("SALE"));
      order.setSignInYard(values.get("SIY"));
      order.setRealEstateCompany(values.get("1"));
      order.setRealtorPhoneNumber(values.get("2"));
      order.setBuildingType(values.containsKey("STRTYPE") ? values.get("STRTYPE") : values.get("BULTYPE"));
      order.setConstructionType(values.containsKey("CONSTR") ? values.get("CONSTR") : values.get("CONTYPE"));
      order.setStories(values.get("STORY"));
      order.setColor(values.get("COLOR"));
      order.setGarageType(values.containsKey("GARAGE") ? values.get("GARAGE") : values.get("3"));
      order.setPropertyCondition(values.containsKey("PC") ? values.get("PC") : values.get("PROCON"));
      order.setNeighborhoodCondition(values.containsKey("NC") ? values.get("NC") : values.get("NBORCON"));
   }

   protected Map<String, String> getSearchParams()
   {
      Map<String, String> params = new HashMap<String, String>();
      params.put("__EVENTTARGET", "");
      params.put("__EVENTARGUMENT", "");
      params.put("__LASTFOCUS", "");
      params.put("__VIEWSTATE", "");
      params.put("TopButtonSearch", "Search");
      params.put("TextBoxJobId", "");
      params.put("TextBoxJobName", "");
      params.put("Job", "RadioButtonPolicyNum");
      params.put("TextBoxPolicyNum", "");
      params.put("TextBoxAddress", "");
      params.put("ListBoxState", "");
      params.put("TextBoxCounty", "");
      params.put("TextBoxCity", "");
      params.put("TextBoxZip", "");
      params.put("ListInactiveDB", "");
      params.put("TextBoxSubmissionDateFrom", "");
      params.put("TextBoxSubmissionDateTo", "");
      params.put("TextBoxStartDate", "");
      params.put("TextBoxEndDate", "");
      params.put("TextBoxRepDueStart", "");
      params.put("TextBoxRepDueEnd", "");
      params.put("TextBoxCreatedStart", "04/29/2011");
      params.put("TextBoxCreatedEnd", "");
      params.put("TextBoxWSDStart", "");
      params.put("TextBoxWSDEnd", "");
      params.put("ListBoxPrd", "");
      params.put("RadioButtonListInv", "");
      params.put("RadioButtonListPaid", "");
      params.put("RadioButtonListRepBill", "");
      params.put("RadioButtonListSortNum", "");
      params.put("DropDownListSyncStatus", "All");
      params.put("RadioButtonListPrinted", "-1");
      params.put("DropdownJobViews", "6");
      params.put("DropDownSortBy", "18");
      params.put("RadioListSortOrder", "ASC");
      params.put("DropDownRecordsDisplayed", "0");
      params.put("TextFilterName", "");
      params.put("TextFilterDescription", "");
      return params;   
   }
   
   Date getDate(String date)
   {
      if (date != null && date.trim().length() > 0)
      {
         try
         {
            Date retDate = SHORT_FORMAT.parse(date);
            return (System.currentTimeMillis() - retDate.getTime() > TWO_YEARS) ? null : retDate;
         }
         catch (ParseException e)
         {
         }
      }
      return null;
   }
   
   class ValueScraper extends HTMLEditorKit.ParserCallback
   {
      private Stack<String> tags = new Stack<String>();
      private Map<String, String> valueMap = new HashMap<String, String>();
      private String currentKey = null;
      
      Map<String, String> getValueMap()
      {
         return valueMap;
      }
      
      public void handleText(char[] data, int pos)
      {
         String currentValue = new String(data).trim();
         if (!tags.empty())
         {
            String currentTag = tags.peek();
            if (currentTag.equals("c"))
            {
               currentKey = currentValue;
            }
            else if (currentTag.equals("v") || currentTag.equals("span"))
            {
               valueMap.put(currentKey, currentValue);
            }
            else
            {
               valueMap.put(currentTag, currentValue);
            }
         }
      }

      @Override
      public void handleSimpleTag(Tag t, MutableAttributeSet a, int pos)
      {
         String tag = t.toString();
         if (tags.empty())
         {
            if ("xml".equals(tag))
            {
               // Start parsing at the "xml" tag
               tags.push(tag);
            }
         }
         else
         {
            if (tag.equals(tags.peek()))
            {
               // We shouldn't have a parent and a child with the same tag name
               tags.pop();
            }
            else
            {
               tags.push(tag);
            }
         }
      }

      @Override
      public void handleStartTag(Tag t, MutableAttributeSet a, int pos)
      {
         if (!tags.empty())
         {
            handleSimpleTag(t, a, pos);
         }
         else if ("span".equals(t.toString()))
         {
            if (a.containsAttribute(Attribute.ID, "_ctl0_Main_JobHeaderIN1_LabelRepDueDt"))
            {
               tags.push(t.toString());
               currentKey = "dueDate";
            }
         }
      }

      @Override
      public void handleEndTag(Tag t, int pos)
      {
         if (!tags.empty())
         {
            handleSimpleTag(t, null, pos);
         }
      }
   };
}